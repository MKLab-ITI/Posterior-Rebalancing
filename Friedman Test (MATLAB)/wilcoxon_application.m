imbalances = [108.9 11.5 1 4.3 3.4 1.4 5.5 3.3 1.0 41.2 1.2 209.1 2.0 3753.6 1.1 1.5 100.8];

%%Logistic
logistic_scores = [
    81 85 74 40 41 59 68 95 65 96 71 79 70 87 63 66 63;
    
    71 86 74 45 41 59 67 95 65 96 75 54 76 92 67 64 63;
    81 85 74 45 41 59 67 95 65 96 67 74 73 85 64 64 63;
    27 86 74 57 47 59 71 94 65 88 75 11 76 26 67 64 66;
    81 85 74 57 47 59 71 94 65 96 67 30 73 82 64 64 63;
    
    76 86 74 45 41 59 67 95 65 96 76 76 78 90 65 64 63;
    81 85 74 45 41 59 67 95 65 96 68 78 73 85 63 64 63;
    32 77 74 54 59 59 65 90 65 88 76 20 53 19 65 64 66;
    81 85 74 56 51 59 73 90 65 96 68 79 73 82 63 64 63;
];
     
logistic_fairness = [
    95 90 100 60 58 93 82 100 98 100 91 92 84 90 92 96 86;
    
    99 91 100 68 59 93 83 100 98 100 98 79 93 99 100 98 86;
    95 91 100 68 59 93 83 100 98 100 87 89 87 88 91 98 86;
    94 98 100 87 68 93 94 100 98 97 98 68 93 74 100 98 94;
    95 90 100 87 68 93 94 100 98 100 87 78 87 85 91 98 86;
    
    98 92 100 68 59 93 83 100 98 100 100 92 97 99 100 98 86;
    95 91 100 68 59 93 83 100 98 100 88 93 86 88 91 98 86;
    95 100 100 92 87 93 100 100 98 97 100 65 96 59 100 98 94;
    95 90 100 89 77 93 97 100 98 100 88 92 86 85 91 98 86;
];
 
logistic_AUC = [
    94 87 82 49 57 60 74 97 69 100 83 95 80 97 72 67 81;
    
    94 89 82 59 55 60 73 97 69 100 83 95 80 93 72 67 81;
    94 89 82 59 55 60 73 97 69 100 83 95 78 92 72 67 81;
    89 89 78 50 56 58 70 96 68 100 83 89 72 77 72 60 82;
    88 89 78 50 56 58 70 96 68 100 83 86 72 79 71 60 82;
    
    76 86 82 52 57 72 58 96 69 99 69 94 64 94 66 60 89;
    94 87 82 50 57 60 74 97 69 100 83 95 80 97 72 67 81;
    76 86 82 52 57 72 58 96 99 99 69 94 64 94 66 60 89;
    79 86 82 51 55 69 57 96 69 99 69 94 64 94 66 57 89;
];
 
%%Smooth-KNN
sknn_scores = [
    66 85 74 7 0 51 9 95 60 93 58 81 5 78 58 49 74;
    
    62 90 74 53 36 64 59 97 60 92 62 76 59 92 58 57 82;
    66 81 74 7 15 55 18 97 60 93 58 80 30 55 58 59 74;
    62 90 74 53 36 64 59 97 60 92 62 76 59 92 58 57 82;
    66 81 74 7 15 55 18 97 60 93 58 80 30 55 58 59 74;
    
    62 90 74 53 49 64 59 95 60 92 62 76 63 92 56 57 82;
    66 80 74 7 0 66 9 97 60 92 58 78 5 74 58 58 81;
    62 90 74 53 49 64 59 95 60 92 62 76 63 92 58 57 82;
    66 80 74 7 0 66 9 96 60 92 58 78 5 74 58 58 81;
];
     
sknn_fairness = [
    91 87 100 8 0 67 10 98 95 99 85 93 7 82 88 60 91;
    
    96 98 100 98 46 93 84 99 95 99 98 93 88 97 88 91 100;
    92 82 100 8 18 75 21 99 95 99 85 93 45 58 88 86 91;
    96 98 100 98 46 93 84 99 95 99 98 93 88 97 88 91 100;
    92 82 100 8 18 75 21 99 95 99 85 93 45 58 88 86 91; 
    
    96 98 100 98 97 93 84 100 95 99 98 63 94 97 88 91 100;
    92 82 100 8 0 90 10 99 95 100 85 92 7 78 88 88 98;
    96 98 100 98 97 93 84 100 95 99 98 93 94 97 88 91 100;
    92 82 100 8 0 90 10 99 95 100 85 92 7 78 88 88 95;
];
 
sknn_AUC = [
    79 86 82 51 55 71 58 96 69 99 69 95 64 94 66 58 89;
    
    78 86 82 52 57 71 58 96 69 98 69 94 64 94 66 60 89;
    79 86 82 51 55 71 57 96 69 99 69 95 64 94 66 59 89;
    78 86 82 52 57 71 58 96 69 98 69 94 64 94 66 60 90;
    79 86 82 51 55 71 57 96 69 99 69 95 64 94 66 59 89;
    
    76 86 82 52 57 72 58 96 69 99 69 94 64 94 66 60 89;
    79 86 82 51 55 69 57 96 69 99 69 94 64 94 66 57 89;
    76 86 82 52 57 72 58 96 69 99 69 94 64 94 66 60 89;
    79 86 82 51 55 69 57 96 69 99 69 94 64 94 66 57 89;
];
 
 %%SVM
svm_scores = [
    78 83 81 0 0 0 0 97 35 83 0 77 0 49 7 16 73;
    
    39 91 81 0 0 17 58 97 34 82 0 20 0 2 9 33 39;
    78 82 81 0 0 17 58 97 34 83 0 67 0 2 9 33 73;
    34 66 81 0 0 17 64 38 34 70 0 12 0 0 9 33 36;
    78 78 81 0 0 17 58 97 34 82 0 71 0 56 9 33 73;
    
    44 94 81 45 48 38 68 96 33 82 24 71 39 74 26 53 78;
    78 77 81 45 48 29 71 97 33 84 24 78 39 58 26 53 82;
    38 64 81 45 48 38 67 12 33 79 24 49 39 18 26 53 72;
    78 66 81 45 48 29 51 97 33 84 24 69 39 48 26 53 81;
];
 
svm_fairness = [
    94 85 100 0 0 0 0 100 65 96 0 92 0 52 11 24 89;
    
    92 93 100 0 0 25 67 100 64 97 1 50 0 49 15 50 88;
    94 84 100 0 0 25 66 100 64 97 1 90 0 49 15 50 99;
    95 100 100 0 0 25 74 75 64 98 1 58 0 1 15 50 91;
    94 79 100 0 0 25 66 100 64 97 1 92 0 59 15 50 99;
    
    96 97 100 100 99 79 100 100 63 97 56 92 61 95 43 100 99;
    94 79 100 100 99 61 88 100 63 96 56 93 61 62 43 100 99;
    98 98 100 100 99 79 100 39 63 97 56 85 61 72 43 100 97;
    94 68 100 100 99 61 59 100 63 96 56 94 61 51 43 100 98; 
];
 
svm_AUC = [
    92 93 89 41 38 46 68 99 56 98 51 97 47 94 57 48 92;
    
    91 93 89 43 39 46 68 99 56 97 51 96 49 94 57 49 92;
    91 88 89 43 39 56 66 99 56 97 51 95 49 94 57 49 91;
    91 84 88 43 39 46 72 95 56 96 51 96 49 58 57 49 91;
    91 80 88 43 39 46 68 95 56 96 51 94 49 59 57 49 90;
    
    90 93 89 42 39 47 68 99 56 97 51 96 49 94 57 49 92;
    92 88 89 42 39 43 67 99 56 98 51 96 49 91 57 50 92;
    87 84 88 42 39 47 72 95 56 97 51 94 49 51 57 49 90;
    91 80 88 42 39 43 68 94 56 97 51 95 49 59 57 50 91;
];
     
 
 
%%
 
labels = {'No Rebalance', ...
            '1exp', 'Texp', 'L+1exp', 'L+Texp', ...
            '1inv', 'Tinv', 'L+1inv', 'L+Tinv'};

%mean(mean(scores(2:end, :))-scores(1,:))

%show_wilcoxon_ratings(svm_scores, labels, '')

ranges =  1:9;%rebalance ranges
%ranges = [1, 7, 10, 11, 12, 13];%ranges for sampling comparison
new_labels = {};
for i=1:length(ranges)
    new_labels{i} = labels{ranges(i)};
end
labels = new_labels;
p = [0.05];
figure('Name', 'Score Improvement Tests' , 'NumberTitle', 'off');
clf
subplot(2,3,1);
friedman_test(-logistic_scores(ranges,:)',labels,p,'Logistic wTPr.Fairness');

subplot(2,3,2);
friedman_test(-sknn_scores(ranges,:)',labels,p,'Smooth-KNN wTPr.Fairness');

subplot(2,3,3);
friedman_test(-svm_scores(ranges,:)',labels,p,'SVM wTPr.Fairness');


subplot(2,3,4);
friedman_test(-logistic_fairness(ranges,:)',labels,p,'Logistic Fairness');

subplot(2,3,5);
friedman_test(-sknn_fairness(ranges,:)',labels,p,'Smooth-KNN Fairness');

subplot(2,3,6);
friedman_test(-svm_fairness(ranges,:)',labels,p,'SVM Fairness');


figure('Name', 'Scatterplot' , 'NumberTitle', 'off');
all_logistic = reshape(logistic_fairness(ranges(2:end),:)-ones(length(ranges)-1,1)*logistic_fairness(ranges(1),:), [], 1);
all_sknn = reshape(sknn_fairness(ranges(2:end),:)-ones(length(ranges)-1,1)*sknn_fairness(ranges(1),:), [], 1);
all_svm = reshape(svm_fairness(ranges(2:end),:)-ones(length(ranges)-1,1)*svm_fairness(ranges(1),:), [], 1);
hold on
scatter(log10(repmat(imbalances, 1,8)), all_logistic/100.0, 'filled', 'MarkerFaceColor', 'r')
scatter(log10(repmat(imbalances, 1,8)), all_sknn/100.0, 'filled', 'MarkerFaceColor', 'm')
scatter(log10(repmat(imbalances, 1,8)), all_svm/100.0, 'filled', 'MarkerFaceColor', 'b')
lsline